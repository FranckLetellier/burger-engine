#include "StageManager.h"
#include "AbstractStage.h"

#include <assert.h>
#include <iostream>

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
StageManager::StageManager()
{
	m_pCurrentStage = NULL;
}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void StageManager::AddStage(AbstractStage* pStage)
{
	assert(pStage);
	if (m_mStages.find(pStage->getName()) != m_mStages.end() )
		std::cerr<<"[ERROR][StageManager] : Scene is already added!"<<std::endl;
	else
	{
		m_mStages[pStage->getName()] = pStage;
	}

}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void StageManager::Clear()
{
	for (std::map<std::string , AbstractStage*>::iterator iter = m_mStages.begin() ; iter != m_mStages.end() ; ++iter)
	{
		delete (*iter).second;
	}
	m_mStages.clear();

	m_pCurrentStage = NULL;
}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void StageManager::Update()
{
	assert(m_pCurrentStage);
	//If finishe need to go to next stage.
	m_pCurrentStage->Update();
}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void StageManager::SetCurrentStage(const std::string& sName)
{
	std::map<std::string,AbstractStage*>::iterator it = m_mStages.find(sName);
	if (it == m_mStages.end())
		std::cerr<<"[ERROR][StageManager]: No Stage found"<<std::endl;
	else
	{
		m_pCurrentStage = (*it).second;
	}
}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void StageManager::Render()
{
	assert(m_pCurrentStage);
	m_pCurrentStage->Render();

}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void StageManager::Reset()
{
	assert(m_pCurrentStage);
	m_pCurrentStage->Reset();

}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
bool StageManager::IsFinished()
{
	assert(m_pCurrentStage);
	return m_pCurrentStage->IsFinished();

}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
const std::string& StageManager::GetNextStageId()
{
	assert(m_pCurrentStage);
	return m_pCurrentStage->getSuccessorId();
}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
AbstractStage& StageManager::_GrabCurrentStage()
{
	return *m_pCurrentStage;
}


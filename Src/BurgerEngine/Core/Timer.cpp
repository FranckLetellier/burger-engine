#include "Timer.h"
#include <iostream>

using namespace sf;

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
Timer::Timer():
	m_fScaledTime(0.0)
{
	QueryPerformanceFrequency(&m_iFrequency);
	m_iStart.QuadPart = (LONGLONG)0.0;
}
//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void Timer::Initialize()
{
	m_oClock.Reset();
}


//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void Timer::Start()
{
	QueryPerformanceCounter(&m_iStart);
}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
void Timer::Update()
{
	float fNewTime = m_oClock.GetElapsedTime();
	m_fScaledTime = fNewTime - m_fLastFrameTime;
	m_fLastFrameTime = fNewTime;

	//std::cout<<m_fScaledTime<< std::endl;
}

//--------------------------------------------------------------------------------------------------------------------
//
//--------------------------------------------------------------------------------------------------------------------
float Timer::Stop()
{
	LARGE_INTEGER iStop;
	QueryPerformanceCounter(&iStop);
	LONGLONG iTimeDiff = iStop.QuadPart - m_iStart.QuadPart;
	//returns duration in milliseconds
	return (float) iTimeDiff * 1000.0f / (float) m_iFrequency.QuadPart;
}
